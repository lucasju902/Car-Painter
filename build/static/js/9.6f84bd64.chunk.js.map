{"version":3,"sources":["pages/auth/SignIn.jsx"],"names":["FullForm","styled","form","InnerForm","props","errors","isSubmitting","touched","values","handleBlur","handleChange","handleSubmit","useState","showPassword","setShowPassword","noValidate","onSubmit","submit","mt","mb","severity","autoComplete","type","name","label","variant","color","value","usr","error","Boolean","fullWidth","helperText","onBlur","onChange","margin","password","htmlFor","id","endAdornment","position","aria-label","onClick","onMouseDown","event","preventDefault","edge","labelWidth","component","RouterLink","to","size","disabled","my","SignIn","dispatch","useDispatch","history","useHistory","user","useSelector","state","authReducer","React","useEffect","push","a","setErrors","setStatus","setSubmitting","signIn","success","title","display","width","height","padding","alignItems","justifyContent","flexDirection","bgcolor","borderRadius","initialValues","validationSchema","Yup","shape","max","required","formProps","align","ml"],"mappings":"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","file":"static/js/9.6f84bd64.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"styled-components\";\r\nimport { Formik } from \"formik\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Link,\r\n  Typography,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  TextField,\r\n} from \"components/MaterialUI\";\r\nimport {\r\n  Visibility as VisibilityIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport { signIn } from \"redux/reducers/authReducer\";\r\n\r\nconst FullForm = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst InnerForm = (props) => {\r\n  const {\r\n    errors,\r\n    isSubmitting,\r\n    touched,\r\n    values,\r\n    handleBlur,\r\n    handleChange,\r\n    handleSubmit,\r\n  } = props;\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <FullForm noValidate onSubmit={handleSubmit}>\r\n      {errors.submit && (\r\n        <Alert mt={2} mb={1} severity=\"warning\">\r\n          {errors.submit}\r\n        </Alert>\r\n      )}\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        type=\"text\"\r\n        name=\"usr\"\r\n        label=\"Email or iRacing Customer ID number\"\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        value={values.usr}\r\n        error={Boolean(touched.usr && errors.usr)}\r\n        fullWidth\r\n        helperText={touched.usr && errors.usr}\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n        margin=\"normal\"\r\n      />\r\n      <FormControl\r\n        fullWidth\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        error={Boolean(touched.password && errors.password)}\r\n      >\r\n        <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n        <OutlinedInput\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type={showPassword ? \"text\" : \"password\"}\r\n          value={values.password}\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n                edge=\"end\"\r\n                color=\"default\"\r\n              >\r\n                {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n          labelWidth={70}\r\n        />\r\n        <FormHelperText id=\"password-helper-text\">\r\n          {errors.password}\r\n        </FormHelperText>\r\n      </FormControl>\r\n      <Link component={RouterLink} to=\"/auth/reset-password\" color=\"primary\">\r\n        Forgot password?\r\n      </Link>\r\n      <Button\r\n        type=\"submit\"\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        disabled={isSubmitting}\r\n        my={5}\r\n      >\r\n        Log in\r\n      </Button>\r\n    </FullForm>\r\n  );\r\n};\r\n\r\nconst SignIn = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const user = useSelector((state) => state.authReducer.user);\r\n\r\n  React.useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [user, history]);\r\n\r\n  const handleSubmit = async (\r\n    values,\r\n    { setErrors, setStatus, setSubmitting }\r\n  ) => {\r\n    try {\r\n      dispatch(signIn({ usr: values.usr, password: values.password }));\r\n    } catch (error) {\r\n      const message = \"Invalid Data\";\r\n\r\n      setStatus({ success: false });\r\n      setErrors({ submit: message });\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet title=\"Sign In\" />\r\n      <Box\r\n        display=\"flex\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        padding={10}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        flexDirection=\"column\"\r\n        bgcolor=\"#333\"\r\n        borderRadius={20}\r\n      >\r\n        <Typography variant=\"h1\" mb={5}>\r\n          Sign In\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{\r\n            usr: \"\",\r\n            password: \"\",\r\n            submit: false,\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            usr: Yup.string().max(255).required(\"Email/ID is required\"),\r\n            password: Yup.string().max(255).required(\"Password is required\"),\r\n          })}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {(formProps) => <InnerForm {...formProps} />}\r\n        </Formik>\r\n\r\n        <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\">\r\n          Not a member yet?\r\n          <Link\r\n            component={RouterLink}\r\n            to=\"/auth/sign-up\"\r\n            color=\"primary\"\r\n            ml={2}\r\n          >\r\n            Sign up\r\n          </Link>\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"],"sourceRoot":""}